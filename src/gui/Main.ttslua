local guiUtil = require("TTS-YGO/src/gui/GUIUtil")
local stringUtil = require("TTS-YGO/src/common/StringUtil")
local state = require("TTS-YGO/src/gui/State")
local assets = require("TTS-YGO/src/gui/Assets")
local packSpawnPage = require("TTS-YGO/src/gui/PackSpawnPage")
local cardImportPage = require("TTS-YGO/src/gui/CardImportPage")
local deckImportPage = require("TTS-YGO/src/gui/DeckImportPage")
local settingsPage = require("TTS-YGO/src/gui/SettingsPage")
local packGenerators = require("TTS-YGO/src/gui/PackGenerators").packGenerators
local cardImport = require("TTS-YGO/src/card-import/CardImporter")
local ydkImport = require("TTS-YGO/src/ydk-import/YdkImport")


local selectedButtonId = nil

local pages = {
    spawnPackButton = packSpawnPage,
    importCardButton = cardImportPage,
    importDeckButton = deckImportPage,
    settingsButton = settingsPage,
}

local eventMapping = {
    ["card-import"] = cardImportPage,
    ["ydk-file-import"] = deckImportPage,
    ["settings"] = settingsPage,
}

function switchPage(player, _, id)
    local xmlTable = self.UI.getXmlTable()

    -- Enable previously selected button and save the state of the old page
    if selectedButtonId ~= nil then
        local selectedButton = guiUtil.getElementById(selectedButtonId, xmlTable)
        selectedButton.attributes.interactable = "true"
    end

    -- Disable pressed button
    local pressedButton = guiUtil.getElementById(id, xmlTable)
    pressedButton.attributes.interactable = "false"
    selectedButtonId = pressedButton.attributes.id

    -- Update UI
    local page = pages[id]
    local pageContainer = guiUtil.getElementById("page-container", xmlTable)
    pageContainer.children = page.getPageObject()

    self.UI.setXmlTable(xmlTable)
    if type(page.afterRender) == "function" then
        Wait.frames(||page.afterRender(), 2)
    end
end

local function getPositionSetting()
    return Vector(state.get("spawn_x"), state.get("spawn_y"), state.get("spawn_z"))
end

local function getRotationSetting()
    return Vector(0, state.get("spawn_rotation"), 0)
end

function searchThroughPacks(player, value)
    packSpawnPage.applyFilter(value)
end

function spawnBox(_, code)
    local pos = getPositionSetting()
    local rotation = getRotationSetting()
    packGenerators[code]:generateBoosterBox(pos, rotation)
end

-- Stores content of input fields into state
-- Contents is used for logic and to restore a page on page switch
function handleInputChange(play, value, id)
    state.put(id, value)
end

function handleEvent(player, value, id)
    local pageId = stringUtil.split(id, ":")[1]
    eventMapping[pageId].handleEvent(id, value, player)
end

local save = state.save

function load(saveState)
    state.loadFromSave(saveState)
    assets.initAssets()
    switchPage(nil, nil, "spawnPackButton")
end
