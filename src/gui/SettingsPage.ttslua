local guiUtil = require("TTS-YGO-sealed-draft/src/gui/GUIUtil")
local state = require("TTS-YGO-sealed-draft/src/gui/State")
local settingsPage = {}

local page = nil

local inputFields = {} -- mapping value -> gui object

local function createTitle(title)
    return {
        tag = "Text",
        attributes = {
            class = "settings-title",
        },
        value = title
    }
end

local function createDescription(desc)
    return {
        tag = "Text",
        attributes = {
            class = "settings-description",
        },
        value = desc
    }
end

local function createPositionSetting()
    local createLabel = function(val)
        return {
            tag = "Text",
            attributes = {
                class = "position-row",
            },
            value = val .. ":"
        }
    end

    local createInput = function(val)
        return {
            tag = "InputField",
            attributes = {
                id = "spawn_" .. val,
                class = "settings-textfield"
            },
            value = "0"
        }
    end

    inputFields["spawn_x"] = createInput("x")
    inputFields["spawn_y"] = createInput("y")
    inputFields["spawn_z"] = createInput("z")

    return {
        tag = "VerticalLayout",
        attributes = {
            class = "invisible settings-row",
        },
        children = {
            createTitle("Position"),
            createDescription("Determines where objects spawn. (0,0,0) is the center of the room."),
            {
                tag = "HorizontalLayout",
                attributes = {
                    class = "position-row"
                },
                children = {
                    createLabel("x"),
                    inputFields["spawn_x"],
                    createLabel("y"),
                    inputFields["spawn_y"],
                    createLabel("z"),
                    inputFields["spawn_z"],
                }
            }
        }
    }
end

local function createRotationSetting()
    inputFields["spawn_rotation"] = {
        tag = "InputField",
        attributes = {
            id = "spawn_rotation",
            class = "settings-textfield"
        },
        value = "0"
    }

    return {
        tag = "VerticalLayout",
        attributes = {
            class = "settings-row",
        },
        children = {
            createTitle("Rotation"),
            createDescription("Determines the orientation the spawned objects are facing. Sensibles values are between 0 and 360."),
            inputFields["spawn_rotation"]
        }
    }
end

local function createAttribution()
    return {
        tag = "Text",
        value = "Made by Larikk",
        attributes = {
            class = "settings-title",
            alignment = "MiddleRight",
        }
    }
end

local function createPageBody()
    return {
        tag = "VerticalLayout",
        attributes = {
            class = "settings"
        },
        children = {
            createPositionSetting(),
            createRotationSetting(),
            createAttribution(),
        }
    }
end

local function createPage()
    return {
        tag = "VerticalLayout",
        attributes = {
            class = "page"
        },
        children = {
            guiUtil.createNavBar("Settings"),
            createPageBody(),
        }
    }
end

function settingsPage.beforeRender()
    for setting,inputField in pairs(inputFields) do
        inputField.value = state.get(setting)
    end
end

function settingsPage.getPageObject()
    if page == nil then
        page = createPage()
    end

    return page
end

function settingsPage.onChange(id, value)
    state.put(id, value)
end

return settingsPage
