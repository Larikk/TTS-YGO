local guiUtil = require("TTS-YGO/src/gui/GUIUtil")
local state = require("TTS-YGO/src/gui/State")
local module = {}

local page = nil

-- IDs of GUI elements
local PAGE_ID = "settings"
local SPAWN_X_INPUT = PAGE_ID .. ":spawn-x"
local SPAWN_Y_INPUT = PAGE_ID .. ":spawn-y"
local SPAWN_Z_INPUT = PAGE_ID .. ":spawn-z"
local SPAWN_ROTATION_INPUT = PAGE_ID .. ":spawn-rotation"

local inputFields = {
    SPAWN_X_INPUT, SPAWN_Y_INPUT, SPAWN_Z_INPUT, SPAWN_ROTATION_INPUT
}

local function createTitle(title)
    return {
        tag = "Text",
        attributes = {
            class = "box-title",
        },
        value = title
    }
end

local function createDescription(desc)
    return {
        tag = "Text",
        attributes = {
            class = "box-description",
        },
        value = desc
    }
end

local function createPositionSetting()
    local createLabel = function(val)
        return {
            tag = "Text",
            attributes = {
                class = "position-row",
            },
            value = val .. ":"
        }
    end

    local createInput = function(id, val)
        return {
            tag = "InputField",
            attributes = {
                id = id,
                class = "settings-textfield",
                onValueChanged = "handleEvent"
            },
            value = "0"
        }
    end

    return {
        tag = "VerticalLayout",
        attributes = {
            class = "invisible box",
        },
        children = {
            createTitle("Position"),
            createDescription("Determines where objects spawn. (0,0,0) is the center of the room."),
            {
                tag = "HorizontalLayout",
                attributes = {
                    class = "position-row"
                },
                children = {
                    createLabel("x"),
                    createInput(SPAWN_X_INPUT, "x"),
                    createLabel("y"),
                    createInput(SPAWN_Y_INPUT, "y"),
                    createLabel("z"),
                    createInput(SPAWN_Z_INPUT, "z"),
                }
            }
        }
    }
end

local function createRotationSetting()
    local spawnRotation = {
        tag = "InputField",
        attributes = {
            id = SPAWN_ROTATION_INPUT,
            class = "settings-textfield",
            onValueChanged = "handleEvent"
        },
        value = "0"
    }

    return {
        tag = "VerticalLayout",
        attributes = {
            class = "box",
        },
        children = {
            createTitle("Rotation"),
            createDescription("Determines the orientation the spawned objects are facing. Sensibles values are between 0 and 360."),
            spawnRotation,
        }
    }
end

local function createResetButton()
    local button = {
        tag = "Button",
        attributes = {
            class = "red button",
            text = "Reset",
            onClick = "resetSettings"
        }
    }

    return {
        tag = "VerticalLayout",
        attributes = {
            class = "box",
        },
        children = {
            createTitle("Press this if you take this object into another room"),
            createDescription("Spawn values are fine tuned to the original room of this object. This will reset them to the center of the room."),
            button,
        }
    }
end

local function createAttribution()
    return {
        tag = "Text",
        value = "Made by Larikk",
        attributes = {
            class = "box-title",
            alignment = "MiddleRight",
            flexibleWidth = "1"
        }
    }
end

local function createPageBody()
    return {
        tag = "VerticalLayout",
        attributes = {
            class = "page-body"
        },
        children = {
            createPositionSetting(),
            createRotationSetting(),
            --createResetButton(),
            createAttribution(),
        }
    }
end

local function createPage()
    return {
        tag = "VerticalLayout",
        attributes = {
            class = "page"
        },
        children = {
            guiUtil.createNavBar("Settings"),
            createPageBody(),
        }
    }
end

function module.resetSettings()
    for _,id in ipairs(inputFields) do
        state.reset(id)
    end

    module.afterRender()
end

function module.afterRender()
    for _,id in ipairs(inputFields) do
        self.UI.setAttribute(id, "text", tostring(state.get(id)))
    end
end

local function updateSetting(id, value)
    state.put(id, value)
end

local eventHandlers = {
    [SPAWN_X_INPUT] = updateSetting,
    [SPAWN_Y_INPUT] = updateSetting,
    [SPAWN_Z_INPUT] = updateSetting,
    [SPAWN_ROTATION_INPUT] = updateSetting,
}

function module.handleEvent(id, value, player)
    local handler = eventHandlers[id]

    if not handler then
        error("No handler registered for id " .. id)
    end

    handler(id, value, player)
end

function module.getPageObject()
    if page == nil then
        page = createPage()
    end

    return page
end

return module
