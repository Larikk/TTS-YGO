local AbstractPackGenerator = require("TTS-YGO/src/pack-spawning/common/AbstractPackGenerator")

-- Pack logic for sets between Strike of Neos and Force of the Breaker
-- Difference to previous: Secret Rares can appear


local CARDS_IN_PACKS = 9

local PACKS_IN_BOX = 24

-- Rarities
local COMMON = "Common"
local RARE = "Rare"
local SUPER_RARE = "Super Rare"
local ULTRA_RARE = "Ultra Rare"
local ULTIMATE_RARE = "Ultimate Rare"
local SECRET_RARE = "Secret Rare"

-- Ratios for last/foil card, must add up to 1.0
-- According to https://yugioh.fandom.com/wiki/Forum:Pull_ratios these numbers should be okay for most sets
-- Ratios for Ultras and Ultimates taken from https://www.pojo.biz/board/showthread.php?t=621221
local RATIOS = {}
RATIOS[COMMON] = 0.67
RATIOS[SUPER_RARE] = 0.17
RATIOS[ULTRA_RARE] = 0.04
RATIOS[ULTIMATE_RARE] = 0.08
RATIOS[SECRET_RARE] = 0.04

-- We want to map some rarities to other rarities (eg. when we want to treat a shortprint as a common)
local RARITY_REPLACEMENTS = {}
RARITY_REPLACEMENTS["Short Print"] = COMMON
RARITY_REPLACEMENTS["Super Short Print"] = COMMON


local PackGenerator = AbstractPackGenerator:new()

function PackGenerator:assemblePack()
    local pack = {}

    -- generates one more than needed because the 9th card may or may not be a common
    local commons = self:pullCards(COMMON, 8)

    -- 7 commons
    for i = 1, 7 do
        pack[i] = commons[i]
    end

    -- guaranteed 1 rare
    pack[8] = self:pullCard(RARE)

    -- wild card
    local rarityOfLast = self:pickRarity(RATIOS)
    if rarityOfLast == COMMON then
        pack[9] = commons[8]
    else
        pack[9] = self:pullCard(rarityOfLast)
    end

    return pack
end

function PackGenerator:new()
    local o = AbstractPackGenerator:new()
    setmetatable(o, self)
    self.__index = self

    o.setName = SET_NAME
    o.setCodePrefix = SET_CODE_PREFIX
    o.setNameUrl = SET_NAME_URL
    o.cardsInPacks = CARDS_IN_PACKS
    o.packsInBox = PACKS_IN_BOX
    o.packTextures = PACK_TEXTURES
    o.boxTexture = BOX_TEXTURE

    -- We search for all entries because of ultimate rares
    o.setDataExtractor:replace(RARITY_REPLACEMENTS)

    return o
end

return PackGenerator
