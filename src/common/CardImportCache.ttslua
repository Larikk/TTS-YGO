local apiUtil = require("TTS-YGO/src/common/ApiUtil")
local cardParser = require("TTS-YGO/src/common/CardParser")
local io = require("TTS-YGO/src/common/IO")
local tableUtil = require("TTS-YGO/src/common/TableUtil")
local stringUtil = require("TTS-YGO/src/common/StringUtil")

local module = {}

-- Cache for cards that are to be imported
-- If a card is not chached, the API is contacted
-- Otherwise the data in the cache is returned

-- Mapping from card_id to api_data
-- IMPORTANT: key must be a string
local cache = {}

-- Used to cache requests done by name
-- Mapping from name to card_id
-- cache should be used to get the card data
local nameCache = {}

-- Value for an id that was not recognized by the API in a bulk request
-- These are marked so that they wont be "redownloaded" later on
local INVALID_ID = "INVALID_ID"

local function insertIntoCache(card)
    local id = card.id
    cache[id] = card
end

local function processResponse(data, nonPresentCardIds, cb, cbParams)
    -- Turn array of ids into Map with id as key
    local requestedIds = {}
    for _,id in ipairs(nonPresentCardIds) do
        requestedIds[id] = 1
    end

    -- data is array of cards
    for _,cardData in ipairs(data) do
        -- We can get multiple cards as a result because we try to parse all artworks as separate cards
        local cards = cardParser.parseCardWithAllArtworks(cardData)
        for _,card in ipairs(cards) do
            insertIntoCache(card)
            requestedIds[card.id] = nil
        end
    end

    -- leftovers that the API did not recognize
    for id,_ in pairs(requestedIds) do
        io.warning("Card with id " .. id .. " could not be downloaded. Will be skipped during spawning.")
        cache[id] = INVALID_ID
    end

    if type(cb) == "function" then cb(cbParams) end
end

-- can be consolodated with processResponse() once querying by ID returns all artworks
-- no checking for missing cards because this is only used for single cards for now
local function processResponseByName(data, name, cb, cbParams)
    local cardData = data[1]
    local cards = cardParser.parseCardWithAllArtworks(cardData)
    for _,card in ipairs(cards) do
        insertIntoCache(card)
    end

    local cardWithMainArtwork = cards[1]
    local id = cardWithMainArtwork.id
    nameCache[name:lower()] = id

    if type(cb) == "function" then cb(cbParams) end
end

local function getNonPresentIds(cardIds)
    local nonPresentCardIds = {}

    for _,id in ipairs(cardIds) do
        if cache[id] == nil then
            table.insert(nonPresentCardIds, id)
        end
    end

    return nonPresentCardIds
end

local function stripLeadingZeros(cardIds)
    local result = {}

    for i, id in ipairs(cardIds) do
        result[i] = stringUtil.stripLeadingCharacter(id, "0")
    end

    return result
end

-- downloads the cardIds if necessary and executes the callback
function module.ensureCardsArePresent(cardIds, cb, cbParams)
    cardIds = stripLeadingZeros(cardIds)
    local nonPresentCardIds = getNonPresentIds(cardIds)

    if #nonPresentCardIds == 0 then
        cb(cbParams)
        return
    end

    nonPresentCardIds = tableUtil.distinct(nonPresentCardIds)

    local query = "id=" .. table.concat(nonPresentCardIds, ",")

    local handler = function(data) processResponse(data, nonPresentCardIds, cb, cbParams) end
    apiUtil.cardinfo(query, handler)
end

function module.ensureCardIsPresent(id, cb, cbParams)
    module.ensureCardsArePresent({id}, cb, cbParams)
end

function module.ensureCardIsPresentByName(name, cb, cbParams)
    if nameCache[name:lower()] then
        cb(cbParams)
        return
    end

    local query = "name=" .. name
    local handler = function(data) processResponseByName(data, name, cb, cbParams) end
    apiUtil.cardinfo(query, handler)
end

function module.getCard(id)
    id = stringUtil.stripLeadingCharacter(id, "0")
    local card = cache[id]

    if card == INVALID_ID then
        io.warning("Skipping " .. id .. "...")
        return nil
    end

    return card
end

function module.getCardByName(name)
    local id = nameCache[name:lower()]

    if id == nil then
        error("No card with name " .. name)
    end

    local card = cache[id]

    if card == nil or card == INVALID_ID then
        error("No card with id " .. id)
    end

    return card
end

return module
