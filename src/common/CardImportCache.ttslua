local apiUtil = require("TTS-YGO/src/common/ApiUtil")
local cardParser = require("TTS-YGO/src/common/CardParser")
local io = require("TTS-YGO/src/common/IO")
local tableUtil = require("TTS-YGO/src/common/TableUtil")

local module = {}

-- Cache for cards that are to be imported
-- If a card is not chached, the API is contacted
-- Otherwise the data in the cache is returned

-- Mapping from card_id to api_data
-- IMPORTANT: key must be a string
local cache = {}

-- Value for an id that was not recognized by the API in a bulk request
-- These are marked so that they wont be "redownloaded" later on
local INVALID_ID = "INVALID_ID"

local function processResponse(data, nonPresentCardIds, cb, cbParams)
    -- Turn array of ids into Map with id as key
    local requestedIds = {}
    for _,id in ipairs(nonPresentCardIds) do
        requestedIds[tostring(id)] = 1
    end

    -- data is array of cards
    for _,cardData in ipairs(data) do
        -- We can get multiple cards as a result because we try to parse all artworks as separate cards
        local cards = cardParser.parseCardWithAllArtworks(cardData)
        for _,card in ipairs(cards) do
            local id = tostring(card.id)
            cache[id] = card
            requestedIds[id] = nil
        end
    end

    -- leftovers that the API did not recognize
    for id,_ in pairs(requestedIds) do
        io.warning("Card with id " .. id .. " could not be downloaded. Will be skipped during spawning.")
        cache[id] = INVALID_ID
    end

    if type(cb) == "function" then cb(cbParams) end
end

local function getNonPresentIds(cardIds)
    local nonPresentCardIds = {}

    for _,id in ipairs(cardIds) do
        if cache[id] == nil then
            table.insert(nonPresentCardIds, id)
        end
    end

    return nonPresentCardIds
end

-- downloand the cardsIds if necessary and executes the callback
function module.ensureCardsArePresent(cardIds, cb, cbParams)
    local nonPresentCardIds = getNonPresentIds(cardIds)

    if #nonPresentCardIds == 0 then
        cb(cbParams)
        return
    end

    nonPresentCardIds = tableUtil.distinct(nonPresentCardIds)

    local query = "id=" .. table.concat(nonPresentCardIds, ",")

    local handler = function(data) processResponse(data, nonPresentCardIds, cb, cbParams) end
    apiUtil.cardinfo(query, handler)
end

function module.getCard(id)
    local card = cache[id]

    if card == INVALID_ID then
        io.warning("Skipping " .. id .. "...")
        return nil
    end

    return card
end

return module
