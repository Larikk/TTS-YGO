-- Imports should be handled in Base

local function copyCard(self, card)
    local copy = {}
    for k,v in pairs(card) do copy[k] = v end
    return copy
end

-- CardMap related methods

local function pickSpecificCard(self, rarity, index)
    return self.copyCard(self, self.cardsMap[rarity][index])
end

local function pullCard(self, rarity)
    local index = Math:randomInt(#self.cardsMap[rarity])
    return self.pickSpecificCard(self, rarity, index)
end

local function pullCards(self, rarity, n)
    local cards = {}
    local sequence = Math:randomSequence(n, #self.cardsMap[rarity])

    for i, v in ipairs(sequence) do
        cards[i] = self.pickSpecificCard(self, rarity, v)
    end

    return cards
end

local function putCardIntoCardsMap(self, card, cardsMap, rarityOverride)
    local rarity = rarityOverride or card.rarity

    if cardsMap[rarity] == nil then
        cardsMap[rarity] = {}
    end

    table.insert(cardsMap[rarity], card)
end

-- ratios is a table
-- key: rarity
-- value: possibility of the rarity
-- values should add up to 1.0
local function pickRarity(self, ratios)
    local p = Math:randomFloat()
    local fallbackRarity = nil

    for rarity, ratio in pairs(ratios) do
        if (p < ratio) then
            return rarity
        end
        p = p - ratio
        fallbackRarity = rarity
    end

    IO:warning(
      "An error occurred while determining a random rarity for a single card. "..
      "Ratios may be misconfigured (Have to add up to 1.0). Defaulting to highest: "..fallbackRarity..
      ". Provided ratios:\n"..IO:tableToString(ratios)
    )

    return fallbackRarity
end

local function extractSetData(self, cardApiData)
    return self.setDataExtractor:extract(cardApiData, self.setName, self.setCodePrefix)
end

function initUtilMethods(generator)
    generator.extractSetData = extractSetData
    generator.pickRarity = pickRarity
    generator.putCardIntoCardsMap = putCardIntoCardsMap
    generator.pullCards = pullCards
    generator.pullCard = pullCard
    generator.pickSpecificCard = pickSpecificCard
    generator.copyCard = copyCard
end
