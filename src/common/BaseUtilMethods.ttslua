-- Imports should be handled in Base

local function copyCard(card)
    local copy = {}
    for k,v in pairs(card) do copy[k] = v end
    return copy
end

-- CardMap related methods

function AbstractPackGenerator:pullSpecificCard(rarity, index)
    return copyCard(self.cardsMap[rarity][index])
end

function AbstractPackGenerator:pickSingleCard(rarity)
    local index = Math:randomInt(self.cardsMap[rarity].count)
    return self:pullSpecificCard(rarity, index)
end

function AbstractPackGenerator:pickMultipleCards(rarity, n)
    local cards = {}
    local sequence = Math:randomSequence(n, self.cardsMap[rarity].count)

    for i, v in ipairs(sequence) do
        cards[i] = self:pullSpecificCard(rarity, v)
    end

    return cards
end

function AbstractPackGenerator:putCardIntoCardsMap(card, cardsMap)
    local rarity = card.rarity

    if cardsMap[rarity] == nil then
        cardsMap[rarity] = {}
        cardsMap[rarity].count = 0
    end

    table.insert(cardsMap[rarity], card)
    cardsMap[rarity].count = cardsMap[rarity].count + 1
end

-- ratios is a table
-- key: rarity
-- value: possibility of the rarity
-- values should add up to 1.0
function AbstractPackGenerator:pickRarity(ratios)
    local p = Math:randomFloat()
    local fallbackRarity = nil

    for rarity, ratio in pairs(ratios) do
        if (p < ratio) then
            return rarity
        end
        p = p - ratio
        fallbackRarity = rarity
    end

    IO:warning(
      "An error occurred while determining a random rarity for a single card. "..
      "Ratios may be misconfigured (Have to add up to 1.0). Defaulting to highest: "..fallbackRarity..
      ". Provided ratios:\n"..IO:tableToString(ratios)
    )

    return fallbackRarity
end
