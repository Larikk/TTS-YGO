local module = {}

function module.distinct(input)
    local output = {}
    local encountered = {}

    for _, v in ipairs(input) do
        if not encountered[v] then
            table.insert(output, v)
            encountered[v] = true
        end
    end

    return output
end

function module.toSet(table)
    local set = {}
    for _, v in ipairs(table) do
        set[v] = true
    end
    return set
end

function module.flatten(tbl)
    local list = {}
    for _, section in pairs(tbl) do
        for _, element in pairs(section) do
            table.insert(list, element)
        end
    end
    return list
end

function module.keys(tbl)
    local keys = {}
    for k, _ in pairs(tbl) do
        table.insert(keys, k)
    end
    return keys
end

function module.copy(tbl)
    local copy = {}
    for k, v in pairs(tbl) do
        copy[k] = v
    end
    return copy
end

function module.indexOf(tbl, element)
    for i, v in ipairs(tbl) do
        if v == element then return i end
    end
    return nil
end

-- source: https://stackoverflow.com/a/6081639
-- Added brackets around numerical keys
function module.serializeTable(val, name, skipnewlines, depth)
    local skipnewlines = skipnewlines or false
    local depth = depth or 0

    local tmp = string.rep(" ", depth)

    if name then
        local key = name
        if type(name) == "number" then
            key = "[" .. name .. "]"
        end
        tmp = tmp .. key .. " = "
    end

    if type(val) == "table" then
        tmp = tmp .. "{" .. (not skipnewlines and "\n" or "")

        for k, v in pairs(val) do
            tmp = tmp .. module.serializeTable(v, k, skipnewlines, depth + 1) .. "," .. (not skipnewlines and "\n" or "")
        end

        tmp = tmp .. string.rep(" ", depth) .. "}"
    elseif type(val) == "number" then
        tmp = tmp .. tostring(val)
    elseif type(val) == "string" then
        tmp = tmp .. string.format("%q", val)
    elseif type(val) == "boolean" then
        tmp = tmp .. (val and "true" or "false")
    else
        tmp = tmp .. "\"[inserializeable datatype:" .. type(val) .. "]\""
    end

    return tmp
end

return module
