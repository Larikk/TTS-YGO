#include <CardHoverText>
#include <CardParser>
#include <SetDataExtractor>
#include <Math>
#include <IO>

-- We are using a third party JSON library because the native JSON deserialization of TTS is very slow
-- Benchmark of 10 decode calls for one booster set: library = ~15sec, native = ~300s
--
-- Code is taken from https://github.com/rxi/json.lua
-- Some changes were made to make it work with TTS
#include <Json>

-- Utility functions for picking cards/rarities and other useful stuff
#include <BaseUtilMethods>

-- Functions which handle the spawning of objects onto the table
#include <BaseSpawningMethods>


local function noop()
    error("This abstract function has no implementation and must be overriden by a specific pack generator.")
end

-- Must be implemented by a specific generator
local function assemblePack(self)
    noop()
end

-- Must be implemented by a specific generator
-- Is called at the end of assembleBox() to make sure certain conditions are BaseUtilMethods
-- (like at least of of ABC Rare or something like that)
local function boxPostConditions(self, packs)
    -- do nothing
end

local function assembleBox(self)
    local packs = {}
    for i = 1, self.packsInBox do
      table.insert(packs, self.assemblePack(self))
    end
    self.boxPostConditions(self, packs)
    return packs
end


-- Can be overridden by subclasses if necessary
local function parseCardList(self, cardList)
    local cardsMap = {}

    for i, cardApiData in ipairs(cardList) do
        local card = CardParser:parseCard(cardApiData)
        local setDataEntries = self.extractSetData(self, cardApiData)
        for i, entry in ipairs(setDataEntries) do
            local copy = self.copyCard(self, card)
            copy.rarity = entry.rarity
            copy.setCode = entry.setCode
            self.putCardIntoCardsMap(self, copy, cardsMap)
        end
    end

    return cardsMap
end


-- downloads the card list from db.ygoprodeck.com and initializes initCardsMap
-- callBack should be the action that should have been executed if cardsMap were initialized
local function initCardsMap(self, callback)
    local responseHandler = function(response, callback)
        IO:info("Received card list, processing response...")
        local cards = Json:decode(response.text).data

        self.cardsMap = self.parseCardList(self, cards)
        IO:info("Processed card list, continuing with spawning.")
        if type(callback) == "function" then callback() end
    end

    IO:info("Downloading card list...")
    WebRequest.get("https://db.ygoprodeck.com/api/v7/cardinfo.php?cardset="..self.setNameUrl,
        function(response) responseHandler(response, callback) end
    )
end

-- spawns a booster, can be called externally
local function generateBoosterPack(self, pos)
    local f = function()
        local pack = self.assemblePack(self)
        self.spawnPack(pack, pos, || IO:success("Pack is ready!"))
    end

    if self.cardsMap == nil then
        self.initCardsMap(self, || f())
    else
        f()
    end
end

-- spawns a box, can be called externally
local function generateBoosterBox(self, pos)
    if self.packsInBox < 2 then
        self.generateBoosterPack(self, pos)
        return
    end

    local f = function()
        local packs = self.assembleBox(self)
        self.spawnBox(self, packs, pos, || IO:success("Box is ready!"))
    end

    if self.cardsMap == nil then
        self.initCardsMap(self, || f())
    else
        f()
    end
end

local function initMethods(generator)
    generator.generateBoosterBox = generateBoosterBox
    generator.generateBoosterPack = generateBoosterPack
    generator.initCardsMap = initCardsMap
    generator.parseCardList = parseCardList
    generator.assembleBox = assembleBox
    generator.boxPostConditions = boxPostConditions
    generator.assemblePack = assemblePack
    initSpawnMethods(generator)
    initUtilMethods(generator)
end


function createPackGenerator()
    local generator = {}

    -- must be overridden by specific generators
    generator.setName = nil
    generator.setCodePrefix = nil
    generator.setNameUrl = nil
    generator.packTextures = nil
    generator.boxTexture = nil
    generator.cardsInPacks = nil
    generator.packsInBox = nil
    generator.setDataExtractor = nil

    -- is initialized before a box/pack is generated for the first time
    -- holds the cards of the set partitioned by their rarity
    -- key: rarity
    -- value: tables with the single cards, indexed with numbers and a count field
    -- use the util methods to for read and write to this map
    generator.cardsMap = nil

    initMethods(generator)

    return generator
end
