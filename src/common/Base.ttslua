#include <CardParser>
#include <Math>
#include <IO>

-- We are using a third party JSON library because the native JSON deserialization of TTS is very slow
-- Benchmark of 10 decode calls for one booster set: library = ~15sec, native = ~300s
--
-- Code is taken from https://github.com/rxi/json.lua
-- Some changes were made to make it work with TTS
#include <Json>


-- Abstract class which has common logic
-- Pack-specific behavior is implemented is subclasses
AbstractPackGenerator = {}

-- Utility functions for picking cards/rarities and other useful stuff
#include <BaseUtilMethods>

-- Functions which handle the spawning of objects onto the table
#include <BaseSpawningMethods>


local function noop()
    error("This abstract function has no implementation and must be overriden by a specific pack generator.")
end

-- Must be implemented by a specific generator
function AbstractPackGenerator:assemblePack()
    noop()
end

-- Must be implemented by a specific generator
-- Is called at the end of assembleBox() to make sure certain conditions are BaseUtilMethods
-- (like at least of of ABC Rare or something like that)
function AbstractPackGenerator:boxPostConditions(packs)
    -- do nothing
end

function AbstractPackGenerator:assembleBox()
    local packs = {}
    for i = 1, self.packsInBox do
      table.insert(packs, self:assemblePack())
    end
    self:boxPostConditions(packs)
    return packs
end


-- Can be overridden by subclasses if necessary
function AbstractPackGenerator:parseCardList(cardList)
    local cardsMap = {}
    local setName = self.setName
    local rarityReplacements = self.rarityReplacements

    for i, cardApiData in ipairs(cardList) do
        local f = function() return CardParser:parseCard(cardApiData, setName, rarityReplacements) end
        local wasSuccessfull, result = pcall(f)
        if wasSuccessfull then
            local card = result
            local rarity = card.rarity

            if cardsMap[rarity] == nil then
                cardsMap[rarity] = {}
                cardsMap[rarity].count = 0
            end

            table.insert(cardsMap[rarity], card)
            cardsMap[rarity].count = cardsMap[rarity].count + 1
        else
            IO:warning(string.format("%s, removing %s from card pool", result, cardApiData.name))
        end

    end

    return cardsMap
end


-- downloads the card list from db.ygoprodeck.com and initializes initCardsMap
-- callBack should be the action that should have been executed if cardsMap were initialized
function AbstractPackGenerator:initCardsMap(callback)
    local responseHandler = function(response, callback)
        IO:info("Received card list, processing response...")
        local cards = Json:decode(response.text).data

        self.cardsMap = self:parseCardList(cards)
        IO:info("Processed card list, continuing with spawning.")
        if type(callback) == "function" then callback() end
    end

    IO:info("Downloading card list...")
    WebRequest.get("https://db.ygoprodeck.com/api/v7/cardinfo.php?cardset="..self.setNameUrl,
        function(response) responseHandler(response, callback) end
    )
end

-- spawns a booster, can be called externally
function AbstractPackGenerator:generateBoosterPack(pos)
    local f = function()
        local pack = self:assemblePack()
        self:spawnPack(pack, pos, || IO:success("Pack is ready!"))
    end

    if self.cardsMap == nil then
        self:initCardsMap(|| f())
    else
        f()
    end
end

-- spawns a box, can be called externally
function AbstractPackGenerator:generateBoosterBox(pos)
    local f = function()
        local packs = self:assembleBox()
        self:spawnBox(packs, pos, || IO:success("Box is ready!"))
    end

    if self.cardsMap == nil then
        self:initCardsMap(|| f())
    else
        f()
    end
end


function AbstractPackGenerator:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self

    -- must be overridden by specific generators
    self.setName = nil
    self.setNameUrl = nil
    self.packTexture = nil
    self.boxTexture = nil
    self.cardsInPacks = nil
    self.packsInBox = nil
    self.rarityReplacements = {}

    -- is initialized before a box/pack is generated for the first time
    -- holds the cards of the set partitioned by their rarity
    -- key: rarity
    -- value: tables with the single cards, indexed with numbers and a count field
    self.cardsMap = nil

    return o
end
