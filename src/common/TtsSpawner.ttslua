local ttsDataMapper = require("TTS-YGO/src/common/TtsDataMapper")


local DEFAULT_SPAWN_POS = Vector(0, 5, 0)
local DEFAULT_SPAWN_ROTATION = Vector(0, 0, 0)

local TtsSpawner = {}

local function highestCustomDeckIdFromObject(o)
    if o.type == "Card" or o.type == "CardCustom" then
        local customDeck = o.getData().CustomDeck
        if customDeck then
            for id, _ in pairs(customDeck) do
                return id
            end
        end
    end

    local max = -1
    if o.type == "Deck" or o.type == "DeckCustom" then
        local customDeck = o.getData().CustomDeck
        if customDeck then
            for id, _ in pairs(customDeck) do
                max = math.max(max, id)
            end
        end
    end
    return max
end

local function determineFreeCustomDeckId()
    print("Determine start")
    local max = -1
    for _, o in ipairs(getObjects()) do
        local id = highestCustomDeckIdFromObject(o)
        max = math.max(id, max)
    end

    if max < 0 then
        max = 0
    end

    return max + 2
end

local function createCustomDeckIdSupplier()
    local supplier = {}
    supplier.id = determineFreeCustomDeckId()
    supplier.next = function()
        local currentId = supplier.id
        supplier.id = supplier.id + 2
        return currentId
    end

    return supplier
end

local function spawn(data, pos, rotation, callback)
    pos = Vector(pos) or Vector(DEFAULT_SPAWN_POS)
    rotation = Vector(rotation) or Vector(DEFAULT_SPAWN_ROTATION)

    spawnParams = {
        data = data,
        position = pos,
        rotation = rotation,
        scale = {x = 1, y = 1, z = 1},
        sound = false,
        snap_to_grid = true,
        callback_function = callback
    }
    spawnObjectData(spawnParams)
end

function TtsSpawner:spawnCard(card, pos, rotation, callback)
    local data = ttsDataMapper.card(card, createCustomDeckIdSupplier())
    spawn(data, pos, rotation, callback)
end

function TtsSpawner:spawnPack(pack, pos, rotation, callback)
    local data = ttsDataMapper.pack(pack, self.setName, self.packTextures)
    spawn(data, pos, rotation, callback)
end

function TtsSpawner:spawnBox(packs, pos, rotation, callback)
    local data = ttsDataMapper.box(packs, self.setName, self.boxTexture, self.packTextures)
    spawn(data, pos, rotation, callback)
end


function TtsSpawner:spawnDeck(deck, pos, rotation, callback)
    if #deck == 1 then
        self:spawnCard(deck[1], pos, rotation, callback)
        return
    end

    local customDeckId = determineFreeCustomDeckId()
    local data = ttsDataMapper.deck(deck, customDeckId)
    spawn(data, pos, rotation, callback)
end

function TtsSpawner:spawnDecks(decks, pos, rotation, callback)
    local customDeckIdSupplier = createCustomDeckIdSupplier()

    for i, deck in ipairs(decks) do
        local data = ttsDataMapper.deck(deck, customDeckIdSupplier)
        spawn(data, pos[i], rotation, callback)
    end
end

-- example argument:
-- {
--     setName = "Metal Raiders",
--     packTextures = "https://example.com/1.jpg",
--     boxTexture = "https://example.com/2.jpg",
--     cardsInPack = 9,
--     packsInBox = 24
-- }
function TtsSpawner:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self

    return o
end

return TtsSpawner
