local mathutil = require("TTS-YGO-sealed-draft/src/common/Math")
local cardHoverText = require("TTS-YGO-sealed-draft/src/common/CardHoverText")
local resources = require("TTS-YGO-sealed-draft/src/common/Resources")


local DEFAULT_SPAWN_POS = Vector(0, 5, 0)
local DEFAULT_SPAWN_ROTATION = Vector(0, 0, 0)

-- LUA Script for spawned containers
local CONTAINER_LUA_SCRIPT = [[
function filterObjectEnter(o)
    return false
end

function onObjectLeaveContainer(container, object)
    if self ~= container then return end

    local rotation = container.getRotation()
    rotation = Vector(0, rotation.y, 0)
    object.setRotation(rotation)

    if self.getQuantity() < 1 then
        self.destruct()
    end
end
]]

local TtsSpawner = {}

-- Remarks to the notation:
-- The suffix "Object" means that a variable points to a phsyical TTS object on the board.
-- No suffix means that the variable points to a table with data.
--
-- Examples:
-- packObject = bag/container on the TTS board
-- pack = table which holds data of cards

function TtsSpawner:spawnCard(card, pos, rotation, callback)
    pos = Vector(pos) or Vector(DEFAULT_SPAWN_POS)
    rotation = Vector(rotation) or Vector(DEFAULT_SPAWN_ROTATION)
    rotation:setAt("z", 180) -- facedown

    spawnParams = {
        type = "Card",
        position = pos,
        rotation = rotation,
        scale = {x = 1, y = 1, z = 1},
        sound = false,
        snap_to_grid = true,

        callback_function = function(cardObject)
            cardObject.setName(cardHoverText.create(card))
            cardObject.setCustomObject({
                face = card.image,
                back = resources.CARD_BACK
            })

            if type(callback) == "function" then callback(cardObject) end
        end
    }

    spawnObject(spawnParams)
end

function TtsSpawner:pickPackTexture()
    if self.packTextures == nil then return resources.DEFAULT_PACK_TEXTURE end
    if type(self.packTextures) == "string" then return self.packTextures end

    local n = mathutil.randomInt(#self.packTextures)
    return self.packTextures[n]
end

function TtsSpawner:spawnPack(pack, pos, rotation, callback)
    pos = Vector(pos) or Vector(DEFAULT_SPAWN_POS)
    rotation = Vector(rotation) or Vector(DEFAULT_SPAWN_ROTATION)
    local cardPos = pos + Vector(0, 5, 0)

    local texture = self:pickPackTexture()

    spawnParams = {
        type = "Custom_Model",
        position = pos,
        rotation = rotation,
        scale = {x = 1, y = 1, z = 1},
        sound = false,
        snap_to_grid = true,

        callback_function = function(packObject)
            packObject.setName(self.setName)
            packObject.setDescription("Booster Pack")
            packObject.setLuaScript(CONTAINER_LUA_SCRIPT)
            packObject.setLock(false)
            packObject.setCustomObject({
                mesh = resources.PACK_MESH,
                diffuse = texture,
                normal = resources.PACK_NORMAL,
                type = 6, -- bag
                material = 3, -- cardbord
                specular_intensity = 0.2,
                specular_sharpness = 7.0,
                fresnel_strength = 0.4
            })
            packObject = packObject.reload()

            -- we have to get a reference to the object trough the guid for some reason for this to work
            local guid = packObject.getGUID()
            local obj = function() return getObjectFromGUID(guid) end

            -- Iterate backwards because the first inserted element in a bag is at the bottom
            for i = #pack, 1, -1 do
                local card = pack[i]
                self:spawnCard(card, cardPos, rotation, function(cardObject) obj().putObject(cardObject) end)
            end

            Wait.condition(
                function() if type(callback) == "function" then callback(obj()) end end,
                function() return obj().getQuantity() >= self.cardsInPack end
            )
        end
    }

    spawnObject(spawnParams)
end

function TtsSpawner:spawnBox(packs, pos, rotation, callback)
    pos = Vector(pos) or Vector(DEFAULT_SPAWN_POS)
    rotation = Vector(rotation) or Vector(DEFAULT_SPAWN_ROTATION)
    local boosterPos = pos + Vector(0, 5, 0)

    spawnParams = {
        type = "Custom_Model",
        position = pos,
        rotation = rotation,
        scale = {x = 1, y = 1, z = 1},
        sound = false,
        snap_to_grid = true,

        callback_function = function(boxObject)
            boxObject.setName(self.setName)
            boxObject.setDescription("Set Box")
            boxObject.setLuaScript(CONTAINER_LUA_SCRIPT)
            boxObject.setLock(false)
            boxObject.setCustomObject({
                mesh = resources.BOX_MESH,
                diffuse = self.boxTexture or resources.DEFAULT_BOX_TEXTURE,
                type = 6, -- bag
                material = 3, -- cardbord
                specular_intensity = 0.05,
                specular_sharpness = 5.0,
                fresnel_strength = 0.1
            })
            boxObject = boxObject.reload()

            -- we have to get a reference to the object trough the guid for some reason for this to work
            local guid = boxObject.getGUID()
            local obj = function() return getObjectFromGUID(guid) end

            for i, pack in ipairs(packs) do
                self:spawnPack(pack, boosterPos, rotation, function(packObject) obj().putObject(packObject) end)
            end

            Wait.condition(
                function() if type(callback) == "function" then callback() end end,
                function() return obj().getQuantity() >= self.packsInBox end
            )
        end
    }

    spawnObject(spawnParams)
end


function TtsSpawner:spawnDeck(deck, pos, rotation, callback)
    -- Constructs a linked stack like data strcture
    -- One node is responsible for spawning one card and joining it with the deck
    -- The callback of the card spawning fires the next node

    -- Dummy node that is executed last
    local node = {
        card = nil,
        next = nil,
        activate = function() if type(callback) == "function" then callback() end end,
    }

    local deckObject = nil

    local spawnCardAndActiveNextNode = function(node)
        local spawnCardCallback = function(cardObject)
            if deckObject == nil then
                -- No card was spawned yet
                deckObject = cardObject
                pos = pos + vector(0, 1, 0)
            else
                -- There are already card(s) present
                deckObject = deckObject.putObject(cardObject)
            end

            node.next.activate()
        end

        self:spawnCard(node.card, pos, rotation, spawnCardCallback)
    end

    for i=#deck, 1, -1 do
        local newNode = {}
        newNode.card = deck[i]
        newNode.activate = || spawnCardAndActiveNextNode(newNode)
        newNode.next = node
        node = newNode
    end

    node.activate()
end

-- example argument:
-- {
--     setName = "Metal Raiders",
--     packTextures = "https://example.com/1.jpg",
--     boxTexture = "https://example.com/2.jpg",
--     cardsInPack = 9,
--     packsInBox = 24
-- }
function TtsSpawner:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self

    return o
end

return TtsSpawner
