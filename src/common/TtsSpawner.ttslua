local mathutil = require("TTS-YGO-sealed-draft/src/common/Math")
local cardHoverText = require("TTS-YGO-sealed-draft/src/common/CardHoverText")
local resources = require("TTS-YGO-sealed-draft/src/common/Resources")
local ttsDataMapper = require("TTS-YGO-sealed-draft/src/common/TtsDataMapper")


local DEFAULT_SPAWN_POS = Vector(0, 5, 0)
local DEFAULT_SPAWN_ROTATION = Vector(0, 0, 0)

-- LUA Script for spawned containers
local CONTAINER_LUA_SCRIPT = [[
function filterObjectEnter(o)
    return false
end

function onObjectLeaveContainer(container, object)
    if self ~= container then return end

    local rotation = container.getRotation()
    rotation = Vector(0, rotation.y, 0)
    object.setRotation(rotation)

    if self.getQuantity() < 1 then
        self.destruct()
    end
end
]]

local TtsSpawner = {}

-- Remarks to the notation:
-- The suffix "Object" means that a variable points to a phsyical TTS object on the board.
-- No suffix means that the variable points to a table with data.
--
-- Examples:
-- packObject = bag/container on the TTS board
-- pack = table which holds data of cards

function TtsSpawner:spawnCard(card, pos, rotation, callback)
    pos = Vector(pos) or Vector(DEFAULT_SPAWN_POS)
    rotation = Vector(rotation) or Vector(DEFAULT_SPAWN_ROTATION)
    rotation:setAt("z", 180) -- facedown

    spawnParams = {
        json = JSON.encode(ttsDataMapper.card(card)),
        position = pos,
        rotation = rotation,
        scale = {x = 1, y = 1, z = 1},
        sound = false,
        snap_to_grid = true,
        callback_function = callback
    }
    spawnObjectJSON(spawnParams)
end

function TtsSpawner:spawnPack(pack, pos, rotation, callback)
    pos = Vector(pos) or Vector(DEFAULT_SPAWN_POS)
    rotation = Vector(rotation) or Vector(DEFAULT_SPAWN_ROTATION)
    local cardPos = pos + Vector(0, 5, 0)

    local data = ttsDataMapper.pack(pack, self.setName, self.packTextureGenerator)

    spawnParams = {
        json = JSON.encode(data),
        position = pos,
        rotation = rotation,
        scale = {x = 1, y = 1, z = 1},
        sound = false,
        snap_to_grid = true,
        callback_function = callback
    }

    spawnObjectJSON(spawnParams)
end

function TtsSpawner:spawnBox(packs, pos, rotation, callback)
    pos = Vector(pos) or Vector(DEFAULT_SPAWN_POS)
    rotation = Vector(rotation) or Vector(DEFAULT_SPAWN_ROTATION)
    local boosterPos = pos + Vector(0, 5, 0)

    local data = ttsDataMapper.box(packs, self.setName, self.boxTexture, self.packTextureGenerator)

    spawnParams = {
        json = JSON.encode(data),
        position = pos,
        rotation = rotation,
        scale = {x = 1, y = 1, z = 1},
        sound = false,
        snap_to_grid = true,
        callback_function = callback,
    }

    spawnObjectJSON(spawnParams)
end


function TtsSpawner:spawnDeck(deck, pos, rotation, callback)
    spawnParams = {
        json = JSON.encode(ttsDataMapper.deck(deck)),
        position = pos,
        rotation = rotation,
    }
    spawnObjectJSON(spawnParams)
end

-- example argument:
-- {
--     setName = "Metal Raiders",
--     packTextures = "https://example.com/1.jpg",
--     boxTexture = "https://example.com/2.jpg",
--     cardsInPack = 9,
--     packsInBox = 24
-- }
function TtsSpawner:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self

    if o.packTextures == nil then
        o.packTextureGenerator = || resources.DEFAULT_PACK_TEXTURE
    elseif type(o.packTextures) == "string" then
        o.packTextureGenerator = || o.packTextures
    elseif type(o.packTextures) == "table" then
        o.packTextureGenerator = function()
            local n = mathutil.randomInt(#o.packTextures)
            return o.packTextures[n]
        end
    end

    return o
end

return TtsSpawner
