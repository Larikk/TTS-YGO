#include <../../common/Base>

-- Name of the set
local SET_NAME = "Legend of Blue Eyes White Dragon"

-- Name used for the query to the api
-- In most cases setting it to SET_NAME should be okay
-- It may be necessary to replace spaces with '%20'
-- Example: "Metal Raiders" => "metal%20raiders"
-- This is kept as a separate parameters in case something else than the raw set name
-- needs to be used for the API query
local SET_NAME_URL = SET_NAME

-- Texture for packs
-- If nil, a placeholder will be used
local PACK_TEXTURE = "https://i.imgur.com/uytVF0z.png"

-- Texture for boxes
-- If nil, a placeholder will be used
local BOX_TEXTURE = "https://i.imgur.com/V50GxkH.png"

-- Number of cards in a single pack
local CARDS_IN_PACKS = 9

-- Number of packs in a set box
local PACKS_IN_BOX = 24

-- Rarities
local COMMON = "Common"
local RARE = "Rare"
local SUPER_RARE = "Super Rare"
local ULTRA_RARE = "Ultra Rare"
local SECRET_RARE = "Secret Rare"

-- We want to map some rarities to other rarities (eg. when we want to treat a shortprint as a common)
local RARITY_REPLACEMENTS = {}
RARITY_REPLACEMENTS["Short Print"] = COMMON

-- Ratios for last card, must add up to 1.0
#include _RatiosPre2016


PackGenerator = AbstractPackGenerator:new()

function PackGenerator:assemblePack()
    local pack = {}
    local cardsMap = self.cardsMap

    -- generates one more than needed for possible 9th card
    local commons = self:pickMultipleCards(COMMON, 8)

    -- 7 commons
    for i = 1, 7 do
        pack[i] = commons[i]
    end

    -- guaranteed 1 rare
    pack[8] = self:pickSingleCard(RARE)

    -- wild card
    local rarityOfLast = self:pickRarity(RATIOS)
    if rarityOfLast == COMMON then
        pack[9] = commons[8]
    else
        pack[9] = self:pickSingleCard(rarityOfLast)
    end

    return pack
end

function PackGenerator:new()
    o = AbstractPackGenerator:new()
    setmetatable(o, self)
    self.__index = self

    self.setName = SET_NAME
    self.setNameUrl = SET_NAME_URL
    self.cardsInPacks = CARDS_IN_PACKS
    self.packsInBox = PACKS_IN_BOX
    self.packTexture = PACK_TEXTURE
    self.boxTexture = BOX_TEXTURE
    self.rarityReplacements = RARITY_REPLACEMENTS

    return o
end
