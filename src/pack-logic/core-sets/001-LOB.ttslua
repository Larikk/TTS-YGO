#include <../../common/Base>

local SET_NAME = "Legend of Blue Eyes White Dragon"

local SET_CODE_PREFIX = "LOB-"

local SET_NAME_URL = SET_NAME

local PACK_TEXTURES = "https://i.imgur.com/uytVF0z.png"

local BOX_TEXTURE = "https://i.imgur.com/V50GxkH.png"

local CARDS_IN_PACKS = 9

local PACKS_IN_BOX = 24

-- Rarities
local COMMON = "Common"
local RARE = "Rare"
local SUPER_RARE = "Super Rare"
local ULTRA_RARE = "Ultra Rare"
local SECRET_RARE = "Secret Rare"

-- Ratios for last card, must add up to 1.0
#include _RatiosPre2016

-- We want to map some rarities to other rarities (eg. when we want to treat a shortprint as a common)
local RARITY_REPLACEMENTS = {}
#include _CommonRarityReplacements


local SET_DATA_EXTRACTOR = SetDataExtractor:new():replace(RARITY_REPLACEMENTS)


PackGenerator = AbstractPackGenerator:new()

function PackGenerator:assemblePack()
    local pack = {}

    -- generates one more than needed because the 9th card may or may not be a common
    local commons = self:pullCards(COMMON, 8)

    -- 7 commons
    for i = 1, 7 do
        pack[i] = commons[i]
    end

    -- guaranteed 1 rare
    pack[8] = self:pullCard(RARE)

    -- wild card
    local rarityOfLast = self:pickRarity(RATIOS)
    if rarityOfLast == COMMON then
        pack[9] = commons[8]
    else
        pack[9] = self:pullCard(rarityOfLast)
    end

    return pack
end

function PackGenerator:new()
    o = AbstractPackGenerator:new()
    setmetatable(o, self)
    self.__index = self

    self.setName = SET_NAME
    self.setCodePrefix = SET_CODE_PREFIX
    self.setNameUrl = SET_NAME_URL
    self.cardsInPacks = CARDS_IN_PACKS
    self.packsInBox = PACKS_IN_BOX
    self.packTextures = PACK_TEXTURES
    self.boxTexture = BOX_TEXTURE
    self.setDataExtractor = SET_DATA_EXTRACTOR:build(self)

    return o
end
