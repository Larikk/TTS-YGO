local baseLogic = require("TTS-YGO-sealed-draft/src/common/BaseLogic")

-- The logic for the first core sets is the same to thats why it is in a separate file
-- This pack locic should be usuable for all core sets before "Soul of the Duelist"


local CARDS_IN_PACKS = 9

local PACKS_IN_BOX = 24

-- Rarities
local COMMON = "Common"
local RARE = "Rare"
local SUPER_RARE = "Super Rare"
local ULTRA_RARE = "Ultra Rare"
local SECRET_RARE = "Secret Rare"

-- Ratios for last/foil card, must add up to 1.0
-- Numbers are taken from https://yugiohblog.konami.com/articles/?p=7413
-- They may not be completely accurate for every single set
-- According to https://yugioh.fandom.com/wiki/Forum:Pull_ratios these numbers should be okay for most sets
local RATIOS = {}
RATIOS[COMMON] = 0.71
RATIOS[SUPER_RARE] = 0.17
RATIOS[ULTRA_RARE] = 0.08
RATIOS[SECRET_RARE] = 0.04

-- We want to map some rarities to other rarities (eg. when we want to treat a shortprint as a common)
local RARITY_REPLACEMENTS = {}
RARITY_REPLACEMENTS["Short Print"] = COMMON
RARITY_REPLACEMENTS["Super Short Print"] = COMMON


local function assemblePack(self)
    local pack = {}

    -- generates one more than needed because the 9th card may or may not be a common
    local commons = self.pullCards(self, COMMON, 8)

    -- 7 commons
    for i = 1, 7 do
        pack[i] = commons[i]
    end

    -- guaranteed 1 rare
    pack[8] = self.pullCard(self, RARE)

    -- wild card
    local rarityOfLast = self.pickRarity(self, RATIOS)
    if rarityOfLast == COMMON then
        pack[9] = commons[8]
    else
        pack[9] = self.pullCard(self, rarityOfLast)
    end

    return pack
end

local logicCoreSetA = {}

function logicCoreSetA.createPackGeneratorCoreSetA()
    local generator = baseLogic.createPackGenerator()

    -- must be overriden
    generator.setName = nil
    generator.setCodePrefix = nil
    generator.setNameUrl = nil
    generator.packTextures = nil
    generator.boxTexture = nil

    generator.cardsInPack = CARDS_IN_PACKS
    generator.packsInBox = PACKS_IN_BOX
    generator.setDataExtractor:replace(RARITY_REPLACEMENTS)

    generator.assemblePack = assemblePack

    return generator
end

return logicCoreSetA
