#include <../../common/Base>

-- Name of the set
local SET_NAME = "Battle Pack: Epic Dawn"

-- Is used for determining the correct rarity
-- Using only the name alone works but may lead to problems later on
-- This variable should hold the whole set code minus the three last digits
local SET_CODE_PREFIX = "BP01-EN"

-- Name used for the query to the api
-- In most cases setting it to SET_NAME should be okay
-- It may be necessary to replace spaces with '%20'
-- Example: "Metal Raiders" => "metal%20raiders"
-- This is kept as a separate parameters in case something else than the raw set name
-- needs to be used for the API query
local SET_NAME_URL = SET_NAME

-- Texture for packs
-- If nil, a placeholder will be used
local PACK_TEXTURES = "https://i.imgur.com/sz85e3z.jpga"

-- Texture for boxes
-- If nil, a placeholder will be used
local BOX_TEXTURE = "https://i.imgur.com/qP94DEb.png"

-- Number of cards in a single pack
local CARDS_IN_PACKS = 5

-- Number of packs in a set box
-- If set to 1 a pack without a box is spawned
local PACKS_IN_BOX = 36

-- Rarities/Slots
-- commons are splitted into four slots
-- each pack has one rare, one common from each slot and one random card as a star foil
local RARE = "Rare"
local COMMON1 = "Common1"
local COMMON2 = "Common2"
local COMMON3 = "Common3"

-- Extract for card_sets array in the api setData
-- Includes rarities and setcode of a card in this particular set
local SET_DATA_EXTRACTOR = SetDataExtractor:new():findAll()

-- Ratios for last card, must add up to 1.0
local RATIOS = {}
RATIOS[RARE] = 0.25
RATIOS[COMMON1] = 0.25
RATIOS[COMMON2] = 0.25
RATIOS[COMMON3] = 0.25


PackGenerator = AbstractPackGenerator:new()

function PackGenerator:assemblePack()
    local pack = {}
    local cardsMap = self.cardsMap

    -- wildcard/starfoil rare first
    -- we generate two card with of the wildCardSlot
    -- the second card is used later when the non-starfoils are added
    local wildCardSlot = self:pickRarity(RATIOS)
    local cardsWithWildCardRarity = self:pullCards(wildCardSlot, 2)
    local wildCard = cardsWithWildCardRarity[1]
    wildCard.rarity = string.format("Starfoil Rare (%s)", wildCard.rarity)
    pack[5] = wildCard

    -- Return either a random card if the slot is different from the wildcard
    -- or the second card of the slot of the wildcard
    local f = function(slot)
        if slot ~= wildCardSlot then
            return self:pullCard(slot)
        else
            return cardsWithWildCardRarity[2]
        end
    end

    pack[1] = f(RARE)
    pack[2] = f(COMMON1)
    pack[3] = f(COMMON2)
    pack[4] = f(COMMON3)

    return pack
end

function PackGenerator:parseCard(cardApiData)
    local setData = self:extractSetData(cardApiData)[1]
    if setData == nil then return end

    setCodeNumber = tonumber(setData.setCode:sub(-3)) -- get last three digits as number

    local slot = nil
    local rarity = nil

    if setCodeNumber <= 55 then
        rarity = "Rare"
        slot = rarity
    elseif setCodeNumber <= 110 then
        rarity = "Common"
        slot = rarity .. "1"
    elseif setCodeNumber <= 170 then
        rarity = "Common"
        slot = rarity .. "2"
    else
        rarity = "Common"
        slot = rarity .. "3"
    end

    local card = CardParser:parseCard(cardApiData)
    card.rarity = rarity
    card.slot = slot
    card.setCode = setCode

    return card
end

-- overridden because there are different categories of commons
-- then can be identified by their set code
-- Rare: 1 to 55
-- Common1: 56 to 110
-- Common2: 111 to 170
-- Common3: 171 to 220
function PackGenerator:parseCardList(cardList)
    local cardsMap = {}

    for i, cardApiData in ipairs(cardList) do
        local card = self:parseCard(cardApiData)
        self:putCardIntoCardsMap(card, cardsMap, card.slot)
    end

    return cardsMap
end

function PackGenerator:new()
    o = AbstractPackGenerator:new()
    setmetatable(o, self)
    self.__index = self

    self.setName = SET_NAME
    self.setCodePrefix = SET_CODE_PREFIX
    self.setNameUrl = SET_NAME_URL
    self.cardsInPacks = CARDS_IN_PACKS
    self.packsInBox = PACKS_IN_BOX
    self.packTextures = PACK_TEXTURES
    self.boxTexture = BOX_TEXTURE
    self.setDataExtractor = SET_DATA_EXTRACTOR:build(self)

    return o
end
