#include <../../common/Base>

local SET_NAME = "Battle Pack: Epic Dawn"

local SET_CODE_PREFIX = "BP01-EN"

local SET_NAME_URL = SET_NAME

local PACK_TEXTURES = "https://i.imgur.com/sz85e3z.jpga"

local BOX_TEXTURE = "https://i.imgur.com/qP94DEb.png"

local CARDS_IN_PACKS = 5

local PACKS_IN_BOX = 36

-- Rarities/Slots
-- commons are splitted into four slots
-- each pack has one rare, one common from each slot and one random card as a star foil
local RARE = "Rare"
local COMMON1 = "Common1"
local COMMON2 = "Common2"
local COMMON3 = "Common3"

-- Ratios for last card, must add up to 1.0
local RATIOS = {}
RATIOS[RARE] = 0.25
RATIOS[COMMON1] = 0.25
RATIOS[COMMON2] = 0.25
RATIOS[COMMON3] = 0.25

local SET_DATA_EXTRACTOR = SetDataExtractor:new():findAll()

local function assemblePack(self)
    local pack = {}
    local cardsMap = self.cardsMap

    -- wildcard/starfoil rare first
    -- we generate two card with of the wildCardSlot
    -- the second card is used later when the non-starfoils are added
    local wildCardSlot = self.pickRarity(self, RATIOS)
    local cardsWithWildCardRarity = self.pullCards(self, wildCardSlot, 2)
    local wildCard = cardsWithWildCardRarity[1]
    wildCard.rarity = string.format("Starfoil Rare (%s)", wildCard.rarity)
    pack[5] = wildCard

    -- Return either a random card if the slot is different from the wildcard
    -- or the second card of the slot of the wildcard
    local f = function(slot)
        if slot ~= wildCardSlot then
            return self.pullCard(self, slot)
        else
            return cardsWithWildCardRarity[2]
        end
    end

    pack[1] = f(RARE)
    pack[2] = f(COMMON1)
    pack[3] = f(COMMON2)
    pack[4] = f(COMMON3)

    return pack
end

local function parseCard(self, cardApiData)
    local setData = self.extractSetData(self, cardApiData)[1]
    if setData == nil then return end

    setCodeNumber = tonumber(setData.setCode:sub(-3)) -- get last three digits as number

    local slot = nil
    local rarity = nil

    if setCodeNumber <= 55 then
        rarity = "Rare"
        slot = rarity
    elseif setCodeNumber <= 110 then
        rarity = "Common"
        slot = rarity .. "1"
    elseif setCodeNumber <= 170 then
        rarity = "Common"
        slot = rarity .. "2"
    else
        rarity = "Common"
        slot = rarity .. "3"
    end

    local card = CardParser:parseCard(cardApiData)
    card.rarity = rarity
    card.slot = slot
    card.setCode = setCode

    return card
end

-- overridden because there are different categories of commons
-- then can be identified by their set code
-- Rare: 1 to 55
-- Common1: 56 to 110
-- Common2: 111 to 170
-- Common3: 171 to 220
local function parseCardList(self, cardList)
    local cardsMap = {}

    for i, cardApiData in ipairs(cardList) do
        local card = self.parseCard(self, cardApiData)
        self.putCardIntoCardsMap(self, card, cardsMap, card.slot)
    end

    return cardsMap
end

function createPackGeneratorBP01()
    local generator = createPackGenerator()

    generator.setName = SET_NAME
    generator.setCodePrefix = SET_CODE_PREFIX
    generator.setNameUrl = SET_NAME_URL
    generator.cardsInPacks = CARDS_IN_PACKS
    generator.packsInBox = PACKS_IN_BOX
    generator.packTextures = PACK_TEXTURES
    generator.boxTexture = BOX_TEXTURE
    generator.setDataExtractor = SET_DATA_EXTRACTOR

    generator.parseCardList = parseCardList
    generator.parseCard = parseCard
    generator.assemblePack = assemblePack

    return generator
end
