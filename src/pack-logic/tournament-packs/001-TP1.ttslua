#include <../../common/Base>


-- Name of the set
local SET_NAME = "Tournament Pack: 1st Season"

-- Is used for determining the correct rarity
-- Using only the name alone works but may lead to problems later on
-- This variable should hold the whole set code minus the three last digits
local SET_CODE_PREFIX = "TP1-E"

-- Name used for the query to the api
-- In most cases setting it to SET_NAME should be okay
-- It may be necessary to replace spaces with '%20'
-- Example: "Metal Raiders" => "metal%20raiders"
-- This is kept as a separate parameters in case something else than the raw set name
-- needs to be used for the API query
local SET_NAME_URL = SET_NAME

-- Texture for packs
-- If nil, a placeholder will be used
local PACK_TEXTURES = "https://i.imgur.com/6LzkAa7.png"

-- Texture for boxes
-- If nil, a placeholder will be used
local BOX_TEXTURE = nil

-- Number of cards in a single pack
local CARDS_IN_PACKS = 3

-- Number of packs in a set box
-- If set to 1 a pack without a box is spawned
local PACKS_IN_BOX = 1

-- Rarities
local COMMON = "Common"
local RARE = "Rare"
local SUPER_RARE = "Super Rare"
local ULTRA_RARE = "Ultra Rare"

-- Extract for card_sets array in the api setData
-- Includes rarities and setcode of a card in this particular set
local SET_DATA_EXTRACTOR = SetDataExtractor:new()

-- Ratios for last card, must add up to 1.0
-- taken from https://youtu.be/Q-H7nckT6fU?t=101
local RATIOS = {}
RATIOS[COMMON] = 0.60
RATIOS[RARE] = 0.33
RATIOS[SUPER_RARE] = 0.06
RATIOS[ULTRA_RARE] = 0.01


PackGenerator = AbstractPackGenerator:new()

function PackGenerator:assemblePack()
    local pack = {}

    -- all three cards can be commons
    local commons = self:pullCards(COMMON, 3)

    -- 2 commons
    for i = 1, 2 do
        pack[i] = commons[i]
    end

    -- one card which can have any rarity
    local rarityOfLast = self:pickRarity(RATIOS)
    if rarityOfLast == COMMON then
        pack[3] = commons[3]
    else
        pack[3] = self:pullCard(rarityOfLast)
    end

    return pack
end

function PackGenerator:new()
    o = AbstractPackGenerator:new()
    setmetatable(o, self)
    self.__index = self

    self.setName = SET_NAME
    self.setCodePrefix = SET_CODE_PREFIX
    self.setNameUrl = SET_NAME_URL
    self.cardsInPacks = CARDS_IN_PACKS
    self.packsInBox = PACKS_IN_BOX
    self.packTextures = PACK_TEXTURES
    self.boxTexture = BOX_TEXTURE
    self.setDataExtractor = SET_DATA_EXTRACTOR:build(self)

    return o
end
