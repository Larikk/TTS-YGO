local stringUtil = require("TTS-YGO/src/common/StringUtil")
local cardImportCache = require("TTS-YGO/src/common/CardImportCache")
local io = require("TTS-YGO/src/common/IO")
local TtsSpawner = require("TTS-YGO/src/common/TtsSpawner")


local module = {}

local function mapIdsToCards(ids)
    local cards = {}

    for _,id in ipairs(ids) do
        local card = cardImportCache.getCard(id)
        if card ~= nil then
            table.insert(cards, card)
        end
    end

    return cards
end

local function trimAndRemoveEmpty(lines)
    local result = {}

    for i,line in ipairs(lines) do
        local s = stringUtil.trim(line)
        if string.len(s) > 0 then
            table.insert(result, s)
        end
    end

    return result
end

local function isSection(str)
    return stringUtil.startsWith(str, "#") or stringUtil.startsWith(str, "!")
end

local function parse(ydkFileContent)
    local result = {}

    local lines = stringUtil.splitByNewLine(ydkFileContent)
    lines = trimAndRemoveEmpty(lines)

    local i = 1
    if stringUtil.startsWith(lines[i], "#created by ") then
        -- I decided to make the created by statement optional
        i = i + 1
    end

    local last = #lines
    local currentSection = nil

    while i <= last do
        local line = lines[i]

        if not stringUtil.isNumeric(line) then
            -- possible section title found
            if isSection(line) then
                currentSection = string.sub(line, 2)
                if result[currentSection] == nil then
                    result[currentSection] = {}
                else
                    error("Duplicate section: " .. line)
                end
            else
                -- neither section title nor integer
                error("Unexpected token: " .. line)
            end
        else
            -- card id found
            if currentSection ~= nil then
                table.insert(result[currentSection], line)
            else
                error("No section was defined before card " .. line)
            end
        end

        i = i + 1
    end

    return result
end

function module.spawn(ydkFileContent, pos, rotation)
    local ran, value = pcall(parse, ydkFileContent)

    if not ran then
        error("YDK FIle could not be parsed: " .. value)
    end

    local decks = value

    local cardIds = {}

    for _,deck in pairs(decks) do
        for _,id in ipairs(deck) do
            table.insert(cardIds, id)
        end
    end

    local cb = function()
        --executed after cache was populated
        local spawnPositions = {
            main = pos,
            extra = pos + Vector(-5, 0, 0),
            side = pos + Vector(5, 0, 0),
        }

        local spawner = TtsSpawner:new()
        for deckName,pos in pairs(spawnPositions) do
            local deck = decks[deckName]
            if deck ~= nil and #deck > 0 then
                io.info("Spawning " .. deckName .. " deck...")
                local onSuccess = || io.success("Finished " .. deckName .. " deck!")
                deck = mapIdsToCards(deck)
                spawner:spawnDeck(deck, pos, rotation, onSuccess)
            end
        end
    end

    cardImportCache.ensureCardsArePresent(cardIds, cb)
end

return module
