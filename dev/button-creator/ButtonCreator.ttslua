#include <../../src/common/IO>
local buttonSections = require("TTS-YGO-sealed-draft/dev/button-creator/Packs")
local buttonLuaScript = require("TTS-YGO-sealed-draft/dev/button-creator/ButtonLuaScript")

-- Spawns the buttons and corresponding titles
-- After spawning TTS will complain about error in the code (like #include/require)
-- Ignore the errors, save the game, reload the new save, get scripts in Atom and deploy it again to TITLE_SPACING_BOTTOM
-- During the deployment Atom will replace the import statements with the corresponding code

-- Constants that can be adjusted
local BUTTONS_PER_ROW = 4 -- how many buttons should be in a row

local SPAWN = Vector(-30, 2, 15) -- Where spawning starts

local BUTTON_HORIZONTAL_SPACING = 5 -- Horizontal space between pack buttons
local BUTTON_VERTICAL_SPACING = -6 -- Vertical space between pack buttons and sections
local TITLE_SPACING_BOTTOM = -5 -- Vertical space between title and buttons


-- Links to required Custom_Model data
local DEFAULT_BUTTON_TEXTURE = "https://i.imgur.com/XlF4YQW.png"
local BUTTON_MESH = "http://pastebin.com/raw/xdTHXJJX"
local BUTTON_NORMAL = "http://i.imgur.com/9FUxR04.png"


function isObjReady(obj)
    return not obj.spawning and not obj.loading_custom and obj.resting
end

function spawnSectionTitle(pos, title)
    pos = pos + Vector(BUTTON_HORIZONTAL_SPACING * ((BUTTONS_PER_ROW-1)/2), 0, 0)
    spawnParams = {
        type = "3DText",
        position = pos,
        rotation = {x=90, y=0, z=0}
    }

    text = spawnObject(spawnParams)
    text.setValue(title)
end

function spawnButton(pos, folder, buttonData)
    spawnParams = {
        type = "Custom_Model",
        position = pos,
        rotation = {x=0, y=180, z=0},

        callback_function = function(obj)
            obj.setLock(false)
            obj.setCustomObject({
                mesh = BUTTON_MESH,
                diffuse = buttonData.art or DEFAULT_BUTTON_TEXTURE,
                normal = BUTTON_NORMAL,
                material = 3, -- cardbord
                specular_intensity = 0.2,
                specular_sharpness = 7.0,
                fresnel_strength = 0.4
            })
            obj = obj.reload()
            local luaScript = buttonLuaScript.createLuaScript(folder, buttonData.file)
            obj.setLuaScript(luaScript)
            Wait.condition(||obj.setLock(true), ||isObjReady(obj), 10)
        end
    }

    spawnObject(spawnParams)
end

function newline(cursor, x)
    cursor = cursor + Vector(0, 0, BUTTON_VERTICAL_SPACING)
    cursor:setAt("x", x)
    return cursor
end

function spawnSection(cursor, section)
    cursor = cursor:copy()
    spawnSectionTitle(cursor, section.title)
    cursor = cursor + Vector(0, 0, TITLE_SPACING_BOTTOM)
    local leftX = cursor.x
    local buttonsInCurrentRow = 0
    for i,button in ipairs(section.packs) do
        spawnButton(cursor, section.folder, button)
        cursor = cursor + Vector(BUTTON_HORIZONTAL_SPACING, 0, 0) -- moves cursor to right
        buttonsInCurrentRow = buttonsInCurrentRow + 1
        if buttonsInCurrentRow == BUTTONS_PER_ROW then
            -- moves cursor to left and bottom
            cursor = newline(cursor, leftX)
            buttonsInCurrentRow = 0
        end
    end

    if buttonsInCurrentRow ~= 0 then
        cursor = newline(cursor, leftX)
    end

    return cursor
end

function spawnButtons()
    local cursor = SPAWN:copy()
    for key,section in pairs(buttonSections) do
        cursor = spawnSection(cursor, section)
    end


end

function none() end
