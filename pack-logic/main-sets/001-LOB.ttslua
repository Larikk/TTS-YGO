#include <../../common/Base>

--Constants
local SET_NAME = "Legend of Blue Eyes White Dragon"
local SET_NAME_URL = "legend%20of%20blue%20eyes%20white%20dragon"
local CARDS_IN_PACKS = 9
local PACKS_IN_BOX = 24

-- Rarities
local COMMON = "Common"
local RARE = "Rare"
local SUPER_RARE = "Super Rare"
local ULTRA_RARE = "Ultra Rare"
local SECRET_RARE = "Secret Rare"

-- We want to map some rarities to other rarities (eg. when we want to treat a shortprint as a common)
local RARITY_REPLACEMENTS = {}
RARITY_REPLACEMENTS["Short Print"] = COMMON

-- Ratios for last card, must add up to 1.0
#include _RatiosPre2016


PackGenerator = AbstractPackGenerator:new()

function PackGenerator:assemblePack()
    local pack = {}
    local cardsMap = self.cardsMap

    -- generates one more than needed for possible 9th card
    local commons = self:pickMultipleCards(COMMON, 8)

    -- 7 commons
    for i = 1, 7 do
        pack[i] = commons[i]
    end

    -- guaranteed 1 rare
    pack[8] = self:pickSingleCard(RARE)

    -- wild card
    local rarityOfLast = self:pickRarity(RATIOS)
    if rarityOfLast == COMMON then
        pack[9] = commons[8]
    else
        pack[9] = Math:randomInt(cardsMap[rarityOfLast].count)
        pack[9] = self:pickSingleCard(rarityOfLast)
    end

    return pack
end

function PackGenerator:new()
    o = AbstractPackGenerator:new()
    setmetatable(o, self)
    self.__index = self

    self.setName = SET_NAME
    self.setNameUrl = SET_NAME_URL
    self.cardsInPacks = CARDS_IN_PACKS
    self.packsInBox = PACKS_IN_BOX
    self.rarityReplacements = RARITY_REPLACEMENTS

    return o
end
