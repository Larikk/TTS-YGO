#include <Spawner>
#include <CardParser>
#include <Math>
#include <IO>

-- We are using a third party JSON library because the native JSON deserialization of TTS is very slow
-- Benchmark of 10 decode calls for one booster set: library = ~15sec, native = ~300s
--
-- Code is taken from https://github.com/rxi/json.lua
-- Some changes were made to make it work with TTS
#include <Json>


-- Each card has all of its releases in the card_sets array
-- Releases can have different rarities so thats why we have to determine the right one
-- rarityReplacements is optional
-- It's used if we want to replace a rarity with another one (like "Short Print" to "Common")
function extractRarity(card, setName, rarityReplacements)
    rarityReplacements = rarityReplacements or {}
    for i, set in ipairs(card.card_sets) do
        if set.set_name == setName then
          return rarityReplacements[set.set_rarity] or set.set_rarity
        end
    end

    -- this can only occurre if the API gave us a card which isn't in the queried set
    IO:warning( string.format("Could not extract rarity of %s, removing from card pool", card.name))
    return nil
end


-- ratios is a table
-- key: rarity
-- value: possibility of the rarity
-- values should add up to 1.0
function pickRarity(ratios)
    local p = Math:randomFloat()
    local fallbackRarity = nil

    for rarity, ratio in pairs(ratios) do
        if (p < ratio) then
            return rarity
        end
        p = p - ratio
        fallbackRarity = rarity
    end

    IO:warning(
      "An error occurred while determining a random rarity for a single card. "..
      "Ratios may be misconfigured (Have to add up to 1). Defaulting to highest: "..fallbackRarity..
      ". Provided ratios:\n"..IO:tableToString(ratios)
    )

    return fallbackRarity
end
