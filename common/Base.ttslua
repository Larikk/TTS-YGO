#include <Spawner>
#include <CardParser>
#include <Math>
#include <IO>

-- We are using a third party JSON library because the native JSON deserialization of TTS is very slow
-- Benchmark of 10 decode calls for one booster set: library = ~15sec, native = ~300s
--
-- Code is taken from https://github.com/rxi/json.lua
-- Some changes were made to make it work with TTS
#include <Json>

AbstractPackGenerator = {}


local function noop()
    error("This base function has no implementation and must be overriden by a specific pack generator.")
end

function AbstractPackGenerator:spawnBoosterBox()
    noop()
end

function AbstractPackGenerator:buildBoosterBox()
    noop()
end

function AbstractPackGenerator:assemblePack()
    noop()
end

-- Each card has all of its releases in the card_sets array
-- Releases can have different rarities so thats why we have to determine the right one
-- rarityReplacements is optional
-- It's used if we want to replace a rarity with another one (like "Short Print" to "Common")
function AbstractPackGenerator:extractRarity(card, setName, rarityReplacements)
    rarityReplacements = rarityReplacements or {}
    for i, set in ipairs(card.card_sets) do
        if set.set_name == setName then
          return rarityReplacements[set.set_rarity] or set.set_rarity
        end
    end

    -- this can only occurre if the API gave us a card which isn't in the queried set
    IO:warning( string.format("Could not extract rarity of %s, removing from card pool", card.name))
    return nil
end


-- ratios is a table
-- key: rarity
-- value: possibility of the rarity
-- values should add up to 1.0
function AbstractPackGenerator:pickRarity(ratios)
    local p = Math:randomFloat()
    local fallbackRarity = nil

    for rarity, ratio in pairs(ratios) do
        if (p < ratio) then
            return rarity
        end
        p = p - ratio
        fallbackRarity = rarity
    end

    IO:warning(
      "An error occurred while determining a random rarity for a single card. "..
      "Ratios may be misconfigured (Have to add up to 1). Defaulting to highest: "..fallbackRarity..
      ". Provided ratios:\n"..IO:tableToString(ratios)
    )

    return fallbackRarity
end


function AbstractPackGenerator:buildBoosterBox()
    local cardsMap = self.cardsMap

    local packs = {}
    for i = 1, self.packsInBox do
      table.insert(packs, self:assemblePack(cardsMap))
    end

    local spawner = Spawner:new(self.packsInBox, self.cardsInPacks)
    spawner:spawnBox(packs, || IO:success("Box is ready!"))

end

function AbstractPackGenerator:initCardsMap(callback)
    WebRequest.get("https://db.ygoprodeck.com/api/v7/cardinfo.php?cardset="..self.setNameUrl,
        function(response)
          print("Working on response")
          local cards = Json:decode(response.text).data
          print("Parsed json")

          local cardsMap = {}

          for i, card in ipairs(cards) do
              local rarity = self:extractRarity(card, self.setName, self.rarityReplacements)
              if  rarity == nil then goto continue end
              card.rarity = rarity

              if cardsMap[rarity] == nil then
                  cardsMap[rarity] = {}
                  cardsMap[rarity].count = 0
              end

              table.insert(cardsMap[rarity], CardParser:parseCard(card))
              cardsMap[rarity].count = cardsMap[rarity].count + 1
              ::continue::
          end

          self.cardsMap = cardsMap
          if type(callback) == "function" then callback() end
        end
    )
end

function AbstractPackGenerator:spawnBoosterBox()
    if self.cardsMap == nil then
        self:initCardsMap(|| self:buildBoosterBox())
    else
        self:buildBoosterBox()
    end
end

function AbstractPackGenerator:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self

    -- must be overridden by specific generators
    self.setName = nil
    self.setNameUrl = nil
    self.cardsInPacks = nil
    self.packsInBox = nil
    self.rarityReplacements = {}

    -- is initialized before a box/pack is generated for the first time
    self.cardsMap = nil

    return o
end
